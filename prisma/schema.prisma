// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name add_balance_pots
//
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Expense {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  amount    Int
}

model User {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String         @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  role          Int            @default(0)
  balance       Float          @default(0)
  wallets       Wallet[]
  transactions  Transaction[]
  userBalances  UserBalance[]
}

model BalancePot {
  id        String   @id @default(uuid())
  type      BalancePotType @unique
  total     Float    @default(0) // Total amount in this pot
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BalancePotType {
  SAFE
  NORMAL
}

model UserBalance {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  type      BalanceType
  amount    Float        @default(0)
  share     Float        @default(0) // Share of the corresponding pot
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([userId, type])
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  address   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  type        TransactionType
  amount      Float       
  sourceType  BalanceType?  
  targetType  BalanceType?  
  method      PaymentMethod
  reference   String?     @db.VarChar(255) 
  
  createdAt   DateTime    @default(now())
  completedAt DateTime?

  @@index([userId, type])
}

model News {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(100)  // News headline
  description String   @db.VarChar(500)  // Short summary
  link        String?  @db.VarChar(2048) // Optional URL (e.g., tweet/article link)
  type        NewsType // Enum for tweet/news
  isRead      Boolean  @default(false)   // Mark as read/unread
  createdAt   DateTime @default(now())
}

model Analytics {
  id           String      @id @default(uuid())
  date         DateTime    @unique @db.Date  // Date-only field as unique key
  
  // Balance type totals
  safeBalance  Float       @default(0)
  normalBalance Float      @default(0)
  riskyBalance  Float      @default(0)
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([date])
}

model Subscription {
  id      String @id @default(uuid())
  email   String @unique
  category String 
  createdAt DateTime @default(now())
}

enum TransactionType {
  INTERNAL_TRANSFER  // Between user balances
  DEPOSIT           // External to balance
  WITHDRAWAL        // Balance to external
}




enum PaymentMethod {
  BANK_TRANSFER
  CRYPTO
  MANUAL_ADJUSTMENT
}

enum BalanceType {
  NORMAL
  SAFE
  RISKY
}

enum NewsType {
  TWEET   // For Twitter/X posts
  ARTICLE // For news articles
  UPDATE  // For platform updates
}